// Code generated by protoc-gen-go. DO NOT EDIT.
// source: task/task.proto

package task

import (
	context "context"
	fmt "fmt"
	common "github.com/PaddlePaddle/PaddleDTX/dai/protos/common"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// TaskRequest is message sent between Executors to request to start a task.
type TaskRequest struct {
	PubKey               []byte   `protobuf:"bytes,1,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	TaskID               string   `protobuf:"bytes,2,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Signature            []byte   `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskRequest) Reset()         { *m = TaskRequest{} }
func (m *TaskRequest) String() string { return proto.CompactTextString(m) }
func (*TaskRequest) ProtoMessage()    {}
func (*TaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e8f2b86464a95fe, []int{0}
}

func (m *TaskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskRequest.Unmarshal(m, b)
}
func (m *TaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskRequest.Marshal(b, m, deterministic)
}
func (m *TaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskRequest.Merge(m, src)
}
func (m *TaskRequest) XXX_Size() int {
	return xxx_messageInfo_TaskRequest.Size(m)
}
func (m *TaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TaskRequest proto.InternalMessageInfo

func (m *TaskRequest) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *TaskRequest) GetTaskID() string {
	if m != nil {
		return m.TaskID
	}
	return ""
}

func (m *TaskRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// TaskResponse is a message received from Executor.
type TaskResponse struct {
	TaskID               string   `protobuf:"bytes,2,opt,name=taskID,proto3" json:"taskID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaskResponse) Reset()         { *m = TaskResponse{} }
func (m *TaskResponse) String() string { return proto.CompactTextString(m) }
func (*TaskResponse) ProtoMessage()    {}
func (*TaskResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e8f2b86464a95fe, []int{1}
}

func (m *TaskResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaskResponse.Unmarshal(m, b)
}
func (m *TaskResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaskResponse.Marshal(b, m, deterministic)
}
func (m *TaskResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaskResponse.Merge(m, src)
}
func (m *TaskResponse) XXX_Size() int {
	return xxx_messageInfo_TaskResponse.Size(m)
}
func (m *TaskResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TaskResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TaskResponse proto.InternalMessageInfo

func (m *TaskResponse) GetTaskID() string {
	if m != nil {
		return m.TaskID
	}
	return ""
}

// ListTaskRequest is message sent to Executor server to list tasks
type ListTaskRequest struct {
	PubKey               []byte   `protobuf:"bytes,1,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	EPubKey              []byte   `protobuf:"bytes,2,opt,name=ePubKey,proto3" json:"ePubKey,omitempty"`
	Status               string   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	TimeStart            int64    `protobuf:"varint,4,opt,name=timeStart,proto3" json:"timeStart,omitempty"`
	TimeEnd              int64    `protobuf:"varint,5,opt,name=timeEnd,proto3" json:"timeEnd,omitempty"`
	Limit                int64    `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTaskRequest) Reset()         { *m = ListTaskRequest{} }
func (m *ListTaskRequest) String() string { return proto.CompactTextString(m) }
func (*ListTaskRequest) ProtoMessage()    {}
func (*ListTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e8f2b86464a95fe, []int{2}
}

func (m *ListTaskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListTaskRequest.Unmarshal(m, b)
}
func (m *ListTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListTaskRequest.Marshal(b, m, deterministic)
}
func (m *ListTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTaskRequest.Merge(m, src)
}
func (m *ListTaskRequest) XXX_Size() int {
	return xxx_messageInfo_ListTaskRequest.Size(m)
}
func (m *ListTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTaskRequest proto.InternalMessageInfo

func (m *ListTaskRequest) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *ListTaskRequest) GetEPubKey() []byte {
	if m != nil {
		return m.EPubKey
	}
	return nil
}

func (m *ListTaskRequest) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ListTaskRequest) GetTimeStart() int64 {
	if m != nil {
		return m.TimeStart
	}
	return 0
}

func (m *ListTaskRequest) GetTimeEnd() int64 {
	if m != nil {
		return m.TimeEnd
	}
	return 0
}

func (m *ListTaskRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// DataForTask is a message received from Executor
type DataForTask struct {
	Owner                []byte   `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Executor             []byte   `protobuf:"bytes,2,opt,name=executor,proto3" json:"executor,omitempty"`
	DataID               string   `protobuf:"bytes,3,opt,name=dataID,proto3" json:"dataID,omitempty"`
	PsiLabel             string   `protobuf:"bytes,4,opt,name=psiLabel,proto3" json:"psiLabel,omitempty"`
	ConfirmedAt          int64    `protobuf:"varint,5,opt,name=confirmedAt,proto3" json:"confirmedAt,omitempty"`
	RejectedAt           int64    `protobuf:"varint,6,opt,name=rejectedAt,proto3" json:"rejectedAt,omitempty"`
	Address              string   `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	IsTagPart            bool     `protobuf:"varint,8,opt,name=isTagPart,proto3" json:"isTagPart,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataForTask) Reset()         { *m = DataForTask{} }
func (m *DataForTask) String() string { return proto.CompactTextString(m) }
func (*DataForTask) ProtoMessage()    {}
func (*DataForTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e8f2b86464a95fe, []int{3}
}

func (m *DataForTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DataForTask.Unmarshal(m, b)
}
func (m *DataForTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DataForTask.Marshal(b, m, deterministic)
}
func (m *DataForTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataForTask.Merge(m, src)
}
func (m *DataForTask) XXX_Size() int {
	return xxx_messageInfo_DataForTask.Size(m)
}
func (m *DataForTask) XXX_DiscardUnknown() {
	xxx_messageInfo_DataForTask.DiscardUnknown(m)
}

var xxx_messageInfo_DataForTask proto.InternalMessageInfo

func (m *DataForTask) GetOwner() []byte {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *DataForTask) GetExecutor() []byte {
	if m != nil {
		return m.Executor
	}
	return nil
}

func (m *DataForTask) GetDataID() string {
	if m != nil {
		return m.DataID
	}
	return ""
}

func (m *DataForTask) GetPsiLabel() string {
	if m != nil {
		return m.PsiLabel
	}
	return ""
}

func (m *DataForTask) GetConfirmedAt() int64 {
	if m != nil {
		return m.ConfirmedAt
	}
	return 0
}

func (m *DataForTask) GetRejectedAt() int64 {
	if m != nil {
		return m.RejectedAt
	}
	return 0
}

func (m *DataForTask) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *DataForTask) GetIsTagPart() bool {
	if m != nil {
		return m.IsTagPart
	}
	return false
}

// FLTask is a message received from Executor and defines Federated Learning Task based on MPC
type FLTask struct {
	TaskID               string             `protobuf:"bytes,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Name                 string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          string             `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Requester            []byte             `protobuf:"bytes,4,opt,name=requester,proto3" json:"requester,omitempty"`
	DataSets             []*DataForTask     `protobuf:"bytes,5,rep,name=dataSets,proto3" json:"dataSets,omitempty"`
	AlgoParam            *common.TaskParams `protobuf:"bytes,6,opt,name=algoParam,proto3" json:"algoParam,omitempty"`
	Status               string             `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	ErrMessage           string             `protobuf:"bytes,8,opt,name=errMessage,proto3" json:"errMessage,omitempty"`
	Result               string             `protobuf:"bytes,9,opt,name=result,proto3" json:"result,omitempty"`
	PublishTime          int64              `protobuf:"varint,10,opt,name=publishTime,proto3" json:"publishTime,omitempty"`
	StartTime            int64              `protobuf:"varint,11,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime              int64              `protobuf:"varint,12,opt,name=endTime,proto3" json:"endTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *FLTask) Reset()         { *m = FLTask{} }
func (m *FLTask) String() string { return proto.CompactTextString(m) }
func (*FLTask) ProtoMessage()    {}
func (*FLTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e8f2b86464a95fe, []int{4}
}

func (m *FLTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FLTask.Unmarshal(m, b)
}
func (m *FLTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FLTask.Marshal(b, m, deterministic)
}
func (m *FLTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FLTask.Merge(m, src)
}
func (m *FLTask) XXX_Size() int {
	return xxx_messageInfo_FLTask.Size(m)
}
func (m *FLTask) XXX_DiscardUnknown() {
	xxx_messageInfo_FLTask.DiscardUnknown(m)
}

var xxx_messageInfo_FLTask proto.InternalMessageInfo

func (m *FLTask) GetTaskID() string {
	if m != nil {
		return m.TaskID
	}
	return ""
}

func (m *FLTask) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FLTask) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *FLTask) GetRequester() []byte {
	if m != nil {
		return m.Requester
	}
	return nil
}

func (m *FLTask) GetDataSets() []*DataForTask {
	if m != nil {
		return m.DataSets
	}
	return nil
}

func (m *FLTask) GetAlgoParam() *common.TaskParams {
	if m != nil {
		return m.AlgoParam
	}
	return nil
}

func (m *FLTask) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *FLTask) GetErrMessage() string {
	if m != nil {
		return m.ErrMessage
	}
	return ""
}

func (m *FLTask) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *FLTask) GetPublishTime() int64 {
	if m != nil {
		return m.PublishTime
	}
	return 0
}

func (m *FLTask) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *FLTask) GetEndTime() int64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

// FLTasks is list of FLTasks received from Executor
type FLTasks struct {
	FLTasks              []*FLTask `protobuf:"bytes,1,rep,name=fLTasks,proto3" json:"fLTasks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *FLTasks) Reset()         { *m = FLTasks{} }
func (m *FLTasks) String() string { return proto.CompactTextString(m) }
func (*FLTasks) ProtoMessage()    {}
func (*FLTasks) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e8f2b86464a95fe, []int{5}
}

func (m *FLTasks) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FLTasks.Unmarshal(m, b)
}
func (m *FLTasks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FLTasks.Marshal(b, m, deterministic)
}
func (m *FLTasks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FLTasks.Merge(m, src)
}
func (m *FLTasks) XXX_Size() int {
	return xxx_messageInfo_FLTasks.Size(m)
}
func (m *FLTasks) XXX_DiscardUnknown() {
	xxx_messageInfo_FLTasks.DiscardUnknown(m)
}

var xxx_messageInfo_FLTasks proto.InternalMessageInfo

func (m *FLTasks) GetFLTasks() []*FLTask {
	if m != nil {
		return m.FLTasks
	}
	return nil
}

// GetTaskRequest is message sent to Executor server to get a task
type GetTaskRequest struct {
	TaskID               string   `protobuf:"bytes,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTaskRequest) Reset()         { *m = GetTaskRequest{} }
func (m *GetTaskRequest) String() string { return proto.CompactTextString(m) }
func (*GetTaskRequest) ProtoMessage()    {}
func (*GetTaskRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e8f2b86464a95fe, []int{6}
}

func (m *GetTaskRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTaskRequest.Unmarshal(m, b)
}
func (m *GetTaskRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTaskRequest.Marshal(b, m, deterministic)
}
func (m *GetTaskRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTaskRequest.Merge(m, src)
}
func (m *GetTaskRequest) XXX_Size() int {
	return xxx_messageInfo_GetTaskRequest.Size(m)
}
func (m *GetTaskRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTaskRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTaskRequest proto.InternalMessageInfo

func (m *GetTaskRequest) GetTaskID() string {
	if m != nil {
		return m.TaskID
	}
	return ""
}

// PredictResponse is a message received from Executor
type PredictResponse struct {
	TaskID               string   `protobuf:"bytes,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	Payload              []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PredictResponse) Reset()         { *m = PredictResponse{} }
func (m *PredictResponse) String() string { return proto.CompactTextString(m) }
func (*PredictResponse) ProtoMessage()    {}
func (*PredictResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e8f2b86464a95fe, []int{7}
}

func (m *PredictResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PredictResponse.Unmarshal(m, b)
}
func (m *PredictResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PredictResponse.Marshal(b, m, deterministic)
}
func (m *PredictResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PredictResponse.Merge(m, src)
}
func (m *PredictResponse) XXX_Size() int {
	return xxx_messageInfo_PredictResponse.Size(m)
}
func (m *PredictResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PredictResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PredictResponse proto.InternalMessageInfo

func (m *PredictResponse) GetTaskID() string {
	if m != nil {
		return m.TaskID
	}
	return ""
}

func (m *PredictResponse) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*TaskRequest)(nil), "task.TaskRequest")
	proto.RegisterType((*TaskResponse)(nil), "task.TaskResponse")
	proto.RegisterType((*ListTaskRequest)(nil), "task.ListTaskRequest")
	proto.RegisterType((*DataForTask)(nil), "task.DataForTask")
	proto.RegisterType((*FLTask)(nil), "task.FLTask")
	proto.RegisterType((*FLTasks)(nil), "task.FLTasks")
	proto.RegisterType((*GetTaskRequest)(nil), "task.GetTaskRequest")
	proto.RegisterType((*PredictResponse)(nil), "task.PredictResponse")
}

func init() { proto.RegisterFile("task/task.proto", fileDescriptor_8e8f2b86464a95fe) }

var fileDescriptor_8e8f2b86464a95fe = []byte{
	// 742 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xdf, 0x6e, 0xd3, 0x3e,
	0x14, 0x56, 0xba, 0xae, 0x7f, 0x4e, 0xbb, 0xdf, 0xf6, 0x33, 0x1b, 0x44, 0x65, 0x9a, 0xaa, 0x5c,
	0x4c, 0x15, 0x12, 0x0b, 0xeb, 0xee, 0xb8, 0x63, 0x94, 0x4d, 0x83, 0x81, 0xaa, 0xac, 0x17, 0x08,
	0x6e, 0x70, 0x9b, 0xb3, 0xcc, 0x2c, 0x89, 0x83, 0xed, 0x00, 0xbd, 0xe5, 0x15, 0x78, 0x0a, 0xde,
	0x80, 0xf7, 0xe0, 0x15, 0xb8, 0xe5, 0x19, 0x40, 0xb6, 0x93, 0x36, 0x9d, 0x86, 0xc4, 0x4d, 0x9b,
	0xef, 0x1c, 0xfb, 0xf3, 0x77, 0xce, 0xf9, 0x6c, 0xd8, 0x54, 0x54, 0x5e, 0xfb, 0xfa, 0xe7, 0x20,
	0x13, 0x5c, 0x71, 0x52, 0xd7, 0xdf, 0xbd, 0x3b, 0x33, 0x9e, 0x24, 0x3c, 0xf5, 0xed, 0x9f, 0x4d,
	0xf5, 0x76, 0x23, 0xce, 0xa3, 0x18, 0x7d, 0x9a, 0x31, 0x9f, 0xa6, 0x29, 0x57, 0x54, 0x31, 0x9e,
	0x4a, 0x9b, 0xf5, 0xde, 0x42, 0x67, 0x42, 0xe5, 0x75, 0x80, 0x1f, 0x72, 0x94, 0x8a, 0xdc, 0x85,
	0x46, 0x96, 0x4f, 0x5f, 0xe0, 0xdc, 0x75, 0xfa, 0xce, 0xa0, 0x1b, 0x14, 0x48, 0xc7, 0xf5, 0x09,
	0x67, 0x23, 0xb7, 0xd6, 0x77, 0x06, 0xed, 0xa0, 0x40, 0x64, 0x17, 0xda, 0x92, 0x45, 0x29, 0x55,
	0xb9, 0x40, 0xb7, 0x6e, 0xb6, 0x2c, 0x03, 0xde, 0x3e, 0x74, 0x2d, 0xb9, 0xcc, 0x78, 0x2a, 0xf1,
	0x6f, 0x2c, 0xde, 0x37, 0x07, 0x36, 0xcf, 0x99, 0x54, 0xff, 0xa2, 0xc4, 0x85, 0x26, 0x8e, 0x6d,
	0xa2, 0x66, 0x12, 0x25, 0xd4, 0x3b, 0xa4, 0xa2, 0x2a, 0x97, 0xee, 0x9a, 0x65, 0xb7, 0x48, 0x6b,
	0x54, 0x2c, 0xc1, 0x0b, 0x45, 0x85, 0x32, 0x1a, 0xd7, 0x82, 0x65, 0x40, 0xf3, 0x69, 0xf0, 0x2c,
	0x0d, 0xdd, 0x75, 0x93, 0x2b, 0x21, 0xd9, 0x86, 0xf5, 0x98, 0x25, 0x4c, 0xb9, 0x0d, 0x13, 0xb7,
	0xc0, 0xfb, 0xe5, 0x40, 0x67, 0x44, 0x15, 0x3d, 0xe1, 0x42, 0xcb, 0xd5, 0xab, 0xf8, 0xa7, 0x14,
	0x45, 0x21, 0xd3, 0x02, 0xd2, 0x83, 0x16, 0x7e, 0xc6, 0x59, 0xae, 0xb8, 0x28, 0x64, 0x2e, 0xb0,
	0xd6, 0x19, 0x52, 0x45, 0xcf, 0x46, 0xa5, 0x4e, 0x8b, 0xf4, 0x9e, 0x4c, 0xb2, 0x73, 0x3a, 0xc5,
	0xd8, 0xc8, 0x6c, 0x07, 0x0b, 0x4c, 0xfa, 0xd0, 0x99, 0xf1, 0xf4, 0x92, 0x89, 0x04, 0xc3, 0x27,
	0xaa, 0x50, 0x5a, 0x0d, 0x91, 0x3d, 0x00, 0x81, 0xef, 0x71, 0xa6, 0xcc, 0x02, 0x2b, 0xb9, 0x12,
	0xd1, 0x75, 0xd2, 0x30, 0x14, 0x28, 0xa5, 0xdb, 0x34, 0xe4, 0x25, 0xd4, 0xfd, 0x61, 0x72, 0x42,
	0xa3, 0xb1, 0xee, 0x4f, 0xab, 0xef, 0x0c, 0x5a, 0xc1, 0x32, 0xe0, 0xfd, 0xae, 0x41, 0xe3, 0xe4,
	0xdc, 0x94, 0xba, 0x1c, 0x9f, 0xb3, 0x62, 0x02, 0x02, 0xf5, 0x94, 0x26, 0x58, 0x0c, 0xd5, 0x7c,
	0x6b, 0xc1, 0x21, 0xca, 0x99, 0x60, 0x99, 0x76, 0x5b, 0x51, 0x69, 0x35, 0xa4, 0x8f, 0x15, 0x76,
	0xd6, 0x28, 0x4a, 0xeb, 0x2c, 0x02, 0xe4, 0x21, 0xb4, 0x74, 0x5b, 0x2e, 0x50, 0x49, 0x77, 0xbd,
	0xbf, 0x36, 0xe8, 0x0c, 0xff, 0x3f, 0x30, 0x7e, 0xaf, 0xf4, 0x3e, 0x58, 0x2c, 0x21, 0x8f, 0xa0,
	0x4d, 0xe3, 0x88, 0x8f, 0xa9, 0xa0, 0x89, 0x29, 0xbe, 0x33, 0x24, 0x07, 0xc5, 0x35, 0xd0, 0x4b,
	0x4d, 0x42, 0x06, 0xcb, 0x45, 0x15, 0xb7, 0x34, 0x57, 0xdc, 0xb2, 0x07, 0x80, 0x42, 0xbc, 0x44,
	0x29, 0x69, 0x84, 0xa6, 0x1d, 0xed, 0xa0, 0x12, 0xd1, 0xfb, 0x04, 0xca, 0x3c, 0x56, 0x6e, 0xdb,
	0xee, 0xb3, 0x48, 0x17, 0x9c, 0xe5, 0xd3, 0x98, 0xc9, 0xab, 0x09, 0x4b, 0xd0, 0x05, 0x3b, 0xa1,
	0x4a, 0xc8, 0xdc, 0x15, 0x6d, 0x39, 0x93, 0xef, 0x58, 0x1f, 0x2e, 0x02, 0xc6, 0xd7, 0x69, 0x68,
	0x72, 0x5d, 0xeb, 0xc3, 0x02, 0x7a, 0x87, 0xd0, 0xb4, 0x03, 0x90, 0x64, 0x1f, 0x9a, 0x97, 0xf6,
	0xd3, 0x75, 0x4c, 0x53, 0xba, 0xb6, 0x29, 0x36, 0x1f, 0x94, 0x49, 0x6f, 0x00, 0xff, 0x9d, 0xe2,
	0xcd, 0xeb, 0x74, 0xdb, 0xec, 0xbc, 0xa7, 0xb0, 0x39, 0x16, 0x18, 0xb2, 0x99, 0xba, 0xe5, 0x96,
	0xae, 0x8e, 0xd9, 0x85, 0x66, 0x46, 0xe7, 0x31, 0xa7, 0x61, 0x79, 0xf3, 0x0a, 0x38, 0xfc, 0x5e,
	0x83, 0xba, 0x71, 0xc8, 0x73, 0x68, 0x95, 0xf7, 0x98, 0xec, 0x58, 0x69, 0x37, 0xee, 0x75, 0x6f,
	0xa3, 0xaa, 0x58, 0x7a, 0xee, 0x97, 0x1f, 0x3f, 0xbf, 0xd6, 0x88, 0xb7, 0xe1, 0x7f, 0x3c, 0x34,
	0x0f, 0x9a, 0x1f, 0x33, 0xa9, 0x1e, 0x3b, 0x0f, 0xc8, 0x2b, 0xe8, 0x14, 0x35, 0x1c, 0xcf, 0xcf,
	0x42, 0xb2, 0x6d, 0xf7, 0xad, 0x96, 0xd5, 0x5b, 0xa9, 0xdf, 0xbb, 0x6f, 0xc8, 0x76, 0xbc, 0xad,
	0x05, 0x59, 0x84, 0x6a, 0x3a, 0x67, 0xa1, 0xe6, 0x7b, 0x07, 0x5b, 0xa7, 0xa8, 0x96, 0xc5, 0xea,
	0xa1, 0x15, 0x9e, 0xaa, 0x32, 0x16, 0xb2, 0x6f, 0x34, 0xc5, 0xf3, 0x0c, 0xf5, 0xae, 0x77, 0x6f,
	0x41, 0x9d, 0xd9, 0x15, 0x02, 0xa5, 0x3e, 0x45, 0x9f, 0x30, 0x84, 0xb6, 0x79, 0x53, 0x4c, 0xf9,
	0xb7, 0x50, 0x93, 0x6a, 0xc8, 0xf2, 0x1e, 0x1f, 0xbd, 0x39, 0x8c, 0x98, 0xba, 0xca, 0xa7, 0xda,
	0xad, 0xfe, 0x98, 0x86, 0x61, 0x8c, 0xf6, 0xb7, 0x00, 0xa3, 0xc9, 0x6b, 0x3f, 0xa4, 0xcc, 0x37,
	0xcf, 0xb5, 0x34, 0x47, 0x4f, 0x1b, 0x06, 0x1c, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0xb8, 0xf7,
	0x49, 0x52, 0x07, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TaskClient is the client API for Task service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaskClient interface {
	// ListTask is provided by Executor server for Executor client to list tasks with filters.
	ListTask(ctx context.Context, in *ListTaskRequest, opts ...grpc.CallOption) (*FLTasks, error)
	// GetTaskById is provided by Executor server for Executor client to query a task.
	GetTaskById(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*FLTask, error)
	// GetPredictResult is provided by Executor server for Executor client to get prediction result.
	GetPredictResult(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*PredictResponse, error)
	// StartTask is for Executors to request remote ones to start a task.
	StartTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
}

type taskClient struct {
	cc *grpc.ClientConn
}

func NewTaskClient(cc *grpc.ClientConn) TaskClient {
	return &taskClient{cc}
}

func (c *taskClient) ListTask(ctx context.Context, in *ListTaskRequest, opts ...grpc.CallOption) (*FLTasks, error) {
	out := new(FLTasks)
	err := c.cc.Invoke(ctx, "/task.Task/ListTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetTaskById(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*FLTask, error) {
	out := new(FLTask)
	err := c.cc.Invoke(ctx, "/task.Task/GetTaskById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) GetPredictResult(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*PredictResponse, error) {
	out := new(PredictResponse)
	err := c.cc.Invoke(ctx, "/task.Task/GetPredictResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) StartTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, "/task.Task/StartTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServer is the server API for Task service.
type TaskServer interface {
	// ListTask is provided by Executor server for Executor client to list tasks with filters.
	ListTask(context.Context, *ListTaskRequest) (*FLTasks, error)
	// GetTaskById is provided by Executor server for Executor client to query a task.
	GetTaskById(context.Context, *GetTaskRequest) (*FLTask, error)
	// GetPredictResult is provided by Executor server for Executor client to get prediction result.
	GetPredictResult(context.Context, *TaskRequest) (*PredictResponse, error)
	// StartTask is for Executors to request remote ones to start a task.
	StartTask(context.Context, *TaskRequest) (*TaskResponse, error)
}

// UnimplementedTaskServer can be embedded to have forward compatible implementations.
type UnimplementedTaskServer struct {
}

func (*UnimplementedTaskServer) ListTask(ctx context.Context, req *ListTaskRequest) (*FLTasks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTask not implemented")
}
func (*UnimplementedTaskServer) GetTaskById(ctx context.Context, req *GetTaskRequest) (*FLTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskById not implemented")
}
func (*UnimplementedTaskServer) GetPredictResult(ctx context.Context, req *TaskRequest) (*PredictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPredictResult not implemented")
}
func (*UnimplementedTaskServer) StartTask(ctx context.Context, req *TaskRequest) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTask not implemented")
}

func RegisterTaskServer(s *grpc.Server, srv TaskServer) {
	s.RegisterService(&_Task_serviceDesc, srv)
}

func _Task_ListTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).ListTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.Task/ListTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).ListTask(ctx, req.(*ListTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetTaskById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetTaskById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.Task/GetTaskById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetTaskById(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_GetPredictResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).GetPredictResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.Task/GetPredictResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).GetPredictResult(ctx, req.(*TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_StartTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).StartTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/task.Task/StartTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).StartTask(ctx, req.(*TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Task_serviceDesc = grpc.ServiceDesc{
	ServiceName: "task.Task",
	HandlerType: (*TaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTask",
			Handler:    _Task_ListTask_Handler,
		},
		{
			MethodName: "GetTaskById",
			Handler:    _Task_GetTaskById_Handler,
		},
		{
			MethodName: "GetPredictResult",
			Handler:    _Task_GetPredictResult_Handler,
		},
		{
			MethodName: "StartTask",
			Handler:    _Task_StartTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task/task.proto",
}
